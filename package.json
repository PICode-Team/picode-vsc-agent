{
  "name": "picode",
  "displayName": "PICode",
  "description": "",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.59.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "picode.startSSH",
        "title": "start SSH connection"
      },
      {
        "command": "picode.codeview.create",
        "title": "create code",
        "icon": "$(add)"
      },
      {
        "command": "picode.codeview.delete",
        "title": "delete code",
        "icon": "$(close)"
      },
      {
        "command": "picode.codeview.update",
        "title": "update code",
        "icon": "$(edit)"
      },
      {
        "command": "picode.codeview.reload",
        "title": "reload code",
        "icon": "$(refresh)"
      },
      {
        "command": "memfs.workspaceInit",
        "title": "Setup Workspace",
        "category": "MemFS"
      },
      {
        "command": "memfs.init",
        "title": "Create Files",
        "category": "MemFS"
      },
      {
        "command": "memfs.reset",
        "title": "Delete Files",
        "category": "MemFS"
      },
      {
        "command": "memfs.deleteFile",
        "title": "Delete \"file.txt\"",
        "category": "MemFS"
      },
      {
        "command": "memfs.addFile",
        "title": "Add \"file.txt\"",
        "category": "MemFS"
      },
      {
        "command": "mywiki.createNote",
        "title": "Create Note",
        "enablement": "!commentIsEmpty"
      },
      {
        "command": "mywiki.replyNote",
        "title": "Reply",
        "enablement": "!commentIsEmpty"
      },
      {
        "command": "mywiki.editNote",
        "title": "Edit",
        "icon": {
          "dark": "resources/edit_inverse.svg",
          "light": "resources/edit.svg"
        }
      },
      {
        "command": "mywiki.deleteNote",
        "title": "Delete",
        "icon": {
          "dark": "resources/close_inverse.svg",
          "light": "resources/close.svg"
        }
      },
      {
        "command": "mywiki.deleteNoteComment",
        "title": "Delete",
        "icon": {
          "dark": "resources/close_inverse.svg",
          "light": "resources/close.svg"
        }
      },
      {
        "command": "mywiki.saveNote",
        "title": "Save"
      },
      {
        "command": "mywiki.cancelsaveNote",
        "title": "Cancel"
      },
      {
        "command": "mywiki.startDraft",
        "title": "Start Draft",
        "enablement": "!commentIsEmpty"
      },
      {
        "command": "mywiki.finishDraft",
        "title": "Finish Draft"
      },
      {
        "command": "mywiki.dispose",
        "title": "Remove All Notes"
      },
      {
        "command": "terminalTest.createAndSend",
        "title": "Terminal API: Create Terminal and Immediately Send"
      },
      {
        "command": "terminalTest.createTerminal",
        "title": "Terminal API: Create Terminal"
      },
      {
        "command": "terminalTest.createTerminalHideFromUser",
        "title": "Terminal API: Create Terminal (hideFromUser)"
      },
      {
        "command": "terminalTest.createZshLoginShell",
        "title": "Terminal API: Create Terminal (zsh login shell)"
      },
      {
        "command": "terminalTest.dimensions",
        "title": "Terminal API: Set dimensions"
      },
      {
        "command": "terminalTest.dispose",
        "title": "Terminal API: Dispose"
      },
      {
        "command": "terminalTest.hide",
        "title": "Terminal API: Hide"
      },
      {
        "command": "terminalTest.onDidWriteTerminalData",
        "title": "Terminal API: Attach data listener"
      },
      {
        "command": "terminalTest.onDidChangeTerminalDimensions",
        "title": "Terminal API: Attach dimensions listener"
      },
      {
        "command": "terminalTest.processId",
        "title": "Terminal API: Get process ID"
      },
      {
        "command": "terminalTest.sendText",
        "title": "Terminal API: Send Text"
      },
      {
        "command": "terminalTest.sendTextNoNewLine",
        "title": "Terminal API: Send Text (no implied \\n)"
      },
      {
        "command": "terminalTest.show",
        "title": "Terminal API: Show"
      },
      {
        "command": "terminalTest.showPreserveFocus",
        "title": "Terminal API: Show (preserving focus)"
      },
      {
        "command": "terminalTest.terminals",
        "title": "Terminal API: View terminals"
      },
      {
        "command": "terminalTest.updateEnvironment",
        "title": "Terminal API: Update environment"
      },
      {
        "command": "terminalTest.clearEnvironment",
        "title": "Terminal API: Clear environment"
      },
      {
        "command": "terminalTest.registerTerminalLinkProvider",
        "title": "Terminal API: Register link provider"
      }
    ],
    "terminal": {
      "profiles": [
        {
          "id": "terminalTest.terminal-profile",
          "icon": "terminal",
          "title": "Terminal API Profile"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "picode-ssh",
          "title": "PICode",
          "icon": "images/test-logo.svg"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "workspace",
          "name": "name"
        }
      ],
      "picode-ssh": [
        {
          "type": "webview",
          "id": "picode.codeview",
          "name": "code"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "picode.codeview.create",
          "when": "view == picode.codeview",
          "group": "navigation"
        },
        {
          "command": "picode.codeview.reload",
          "when": "view == picode.codeview",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "mywiki.createNote",
          "when": "false"
        },
        {
          "command": "mywiki.replyNote",
          "when": "false"
        },
        {
          "command": "mywiki.deleteNote",
          "when": "false"
        },
        {
          "command": "mywiki.deleteNoteComment",
          "when": "false"
        }
      ],
      "comments/commentThread/title": [
        {
          "command": "mywiki.deleteNote",
          "group": "navigation",
          "when": "commentController == comment-sample && !commentThreadIsEmpty"
        }
      ],
      "comments/commentThread/context": [
        {
          "command": "mywiki.createNote",
          "group": "inline",
          "when": "commentController == comment-sample && commentThreadIsEmpty"
        },
        {
          "command": "mywiki.replyNote",
          "group": "inline",
          "when": "commentController == comment-sample && !commentThreadIsEmpty"
        },
        {
          "command": "mywiki.startDraft",
          "group": "inline",
          "when": "commentController == comment-sample && commentThreadIsEmpty"
        },
        {
          "command": "mywiki.finishDraft",
          "group": "inline",
          "when": "commentController == comment-sample && commentThread == draft"
        }
      ],
      "comments/comment/title": [
        {
          "command": "mywiki.editNote",
          "group": "group@1",
          "when": "commentController == comment-sample"
        },
        {
          "command": "mywiki.deleteNoteComment",
          "group": "group@2",
          "when": "commentController == comment-sample && comment == canDelete"
        }
      ],
      "comments/comment/context": [
        {
          "command": "mywiki.cancelsaveNote",
          "group": "inline@1",
          "when": "commentController == comment-sample"
        },
        {
          "command": "mywiki.saveNote",
          "group": "inline@2",
          "when": "commentController == comment-sample"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "test-compile": "tsc -p ./",
    "test-watch": "tsc -watch -p ./",
    "pretest": "npm run test-compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/vscode": "^1.59.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "eslint": "^7.27.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "ts-loader": "^9.2.2",
    "typescript": "^4.3.2",
    "vscode-test": "^1.5.2",
    "webpack": "^5.38.1",
    "webpack-cli": "^4.7.0"
  },
  "dependencies": {
    "@types/node-fetch": "^2.5.12",
    "@vscode/codicons": "^0.0.21",
    "node-fetch": "^2.6.1"
  }
}
